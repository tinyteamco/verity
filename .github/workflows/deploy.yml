name: Deploy

on:
  push:
    branches: [main]

# Prevent concurrent deployments to avoid race conditions
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  PROJECT_ID: verity-platform-473406
  REGION: europe-west1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Bootstrap development environment
        run: make bootstrap

      - name: Run backend checks
        run: make backend-check

      - name: Setup Firebase project config
        run: |
          # Create Firebase project config that Makefile expects
          echo '{"projects":{"default":"verity-local"}}' > .firebaserc

      - name: Start MinIO for audio storage tests
        run: docker compose up -d minio minio-setup

      - name: Start Firebase emulator
        run: cd backend && make start-firebase

      - name: Run backend tests (seeds Firebase automatically)
        run: cd backend && make test-ci

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      - name: Get infrastructure configuration from Pulumi
        working-directory: ./infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          # Get outputs from Pulumi stack (single source of truth)
          DB_CONNECTION_NAME=$(pulumi stack output db_connection_name)
          BACKEND_SERVICE_NAME=$(pulumi stack output backend_service_name)
          DATABASE_URL_SECRET=$(pulumi stack output database_url_secret_name)

          # Export as environment variables for next steps
          echo "DB_CONNECTION_NAME=$DB_CONNECTION_NAME" >> $GITHUB_ENV
          echo "BACKEND_SERVICE_NAME=$BACKEND_SERVICE_NAME" >> $GITHUB_ENV
          echo "DATABASE_URL_SECRET=$DATABASE_URL_SECRET" >> $GITHUB_ENV

          echo "âœ… Retrieved from Pulumi:"
          echo "  DB_CONNECTION_NAME=$DB_CONNECTION_NAME"
          echo "  BACKEND_SERVICE_NAME=$BACKEND_SERVICE_NAME"
          echo "  DATABASE_URL_SECRET=$DATABASE_URL_SECRET"

      - name: Build and push Docker image
        run: |
          IMAGE_URI="europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/verity/backend:${{ github.sha }}"
          docker build --platform linux/amd64 -t $IMAGE_URI ./backend
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # TODO: Automate database migrations
      # For now, migrations are run manually via Pulumi or locally
      # Future: Set up Cloud SQL Proxy with proper IAM permissions
      # - name: Run database migrations

      - name: Deploy to Cloud Run
        run: |
          # Use configuration from Pulumi stack for single source of truth
          # DATABASE_URL comes from Secret Manager (managed by Pulumi)
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image ${{ env.IMAGE_URI }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --port 8000 \
            --use-http2 \
            --cpu-throttling \
            --execution-environment gen2 \
            --set-secrets="DATABASE_URL=${{ env.DATABASE_URL_SECRET }}:latest" \
            --set-cloudsql-instances ${{ env.DB_CONNECTION_NAME }} \
            --startup-probe="httpGet.path=/api/health,httpGet.port=8000,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=10,failureThreshold=3" \
            --liveness-probe="httpGet.path=/api/health,httpGet.port=8000,timeoutSeconds=5,periodSeconds=30,failureThreshold=3"