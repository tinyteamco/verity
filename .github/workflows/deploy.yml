name: Deploy

on:
  push:
    branches: [main]

# Prevent concurrent deployments to avoid race conditions
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  PROJECT_ID: verity-platform-473406

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Bootstrap development environment
        run: make bootstrap

      - name: Run backend checks
        run: make backend-check

      - name: Setup Firebase project config
        run: |
          # Create Firebase project config that Makefile expects
          echo '{"projects":{"default":"verity-local"}}' > .firebaserc

      - name: Start MinIO for audio storage tests
        run: docker compose up -d minio minio-setup

      - name: Start Firebase emulator
        run: cd backend && make start-firebase

      - name: Run backend tests (seeds Firebase automatically)
        run: make backend-test

      - name: Setup frontend
        run: make frontend-setup

      - name: Install Playwright browsers
        run: cd frontend && npx playwright install --with-deps chromium

      - name: Generate BDD test specs
        run: cd frontend && npx bddgen

      - name: Run frontend E2E tests
        run: make frontend-test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      - name: Check for infrastructure changes
        id: infra-check
        working-directory: ./infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          # Select the dev stack
          pulumi stack select dev

          # Run preview and capture output
          pulumi preview --diff 2>&1 | tee preview.txt

          # Check if preview indicates changes
          if grep -q "Resources:" preview.txt && ! grep -q "~ 0 to update" preview.txt; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "⚡ Infrastructure changes detected"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "✅ No infrastructure changes needed"
          fi

      - name: Deploy infrastructure changes
        if: steps.infra-check.outputs.has_changes == 'true'
        working-directory: ./infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi up --yes --skip-preview
          echo "✅ Infrastructure deployed"

      - name: Get infrastructure configuration from Pulumi
        working-directory: ./infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          # Select the dev stack
          pulumi stack select dev

          # Get outputs from Pulumi stack (single source of truth)
          REGION=$(pulumi stack output region)
          DB_CONNECTION_NAME=$(pulumi stack output db_connection_name)
          BACKEND_SERVICE_NAME=$(pulumi stack output backend_service_name)
          DATABASE_URL_SECRET=$(pulumi stack output database_url_secret_name)
          FIREBASE_API_KEY=$(pulumi stack output firebase_api_key)
          FIREBASE_AUTH_DOMAIN=$(pulumi stack output firebase_auth_domain)
          FIREBASE_PROJECT_ID=$(pulumi stack output firebase_project_id)

          # Export as environment variables for next steps
          echo "REGION=$REGION" >> $GITHUB_ENV
          echo "DB_CONNECTION_NAME=$DB_CONNECTION_NAME" >> $GITHUB_ENV
          echo "BACKEND_SERVICE_NAME=$BACKEND_SERVICE_NAME" >> $GITHUB_ENV
          echo "DATABASE_URL_SECRET=$DATABASE_URL_SECRET" >> $GITHUB_ENV
          echo "FIREBASE_API_KEY=$FIREBASE_API_KEY" >> $GITHUB_ENV
          echo "FIREBASE_AUTH_DOMAIN=$FIREBASE_AUTH_DOMAIN" >> $GITHUB_ENV
          echo "FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID" >> $GITHUB_ENV

          echo "✅ Retrieved from Pulumi:"
          echo "  REGION=$REGION"
          echo "  DB_CONNECTION_NAME=$DB_CONNECTION_NAME"
          echo "  BACKEND_SERVICE_NAME=$BACKEND_SERVICE_NAME"
          echo "  DATABASE_URL_SECRET=$DATABASE_URL_SECRET"
          echo "  FIREBASE_API_KEY=$FIREBASE_API_KEY"
          echo "  FIREBASE_AUTH_DOMAIN=$FIREBASE_AUTH_DOMAIN"
          echo "  FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID"

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/verity/backend:${{ github.sha }}"
          docker build --platform linux/amd64 -t $IMAGE_URI ./backend
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          # Get DATABASE_URL from Secret Manager and convert to localhost format for proxy
          DATABASE_URL_CLOUDSQL=$(gcloud secrets versions access latest --secret=${{ env.DATABASE_URL_SECRET }})

          # Extract user, password, and database name from the Cloud SQL URL
          # Format: postgresql+psycopg://user:pass@/dbname?host=/cloudsql/...
          USER_PASS=$(echo "$DATABASE_URL_CLOUDSQL" | sed -n 's|postgresql+psycopg://\([^@]*\)@.*|\1|p')
          DB_NAME=$(echo "$DATABASE_URL_CLOUDSQL" | sed -n 's|.*@/\([^?]*\).*|\1|p')
          DATABASE_URL="postgresql+psycopg://${USER_PASS}@localhost:5432/${DB_NAME}"

          # Install Cloud SQL Proxy
          curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.14.2/cloud-sql-proxy.linux.amd64
          chmod +x cloud-sql-proxy

          # Start Cloud SQL proxy in background
          ./cloud-sql-proxy ${{ env.DB_CONNECTION_NAME }} &
          PROXY_PID=$!

          # Wait for proxy to be ready
          echo "Waiting for Cloud SQL proxy..."
          for i in {1..30}; do
            if nc -z localhost 5432 2>/dev/null; then
              echo "✅ Cloud SQL proxy ready"
              break
            fi
            sleep 2
          done

          # Run migrations in Docker container with localhost connection
          docker run --rm \
            --network host \
            -e DATABASE_URL="$DATABASE_URL" \
            ${{ env.IMAGE_URI }} \
            uv run alembic upgrade head

          # Cleanup
          kill $PROXY_PID
          echo "✅ Database migrations completed"

      - name: Deploy to Cloud Run
        run: |
          # Use configuration from Pulumi stack for single source of truth
          # DATABASE_URL comes from Secret Manager (managed by Pulumi)
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image ${{ env.IMAGE_URI }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --port 8000 \
            --no-use-http2 \
            --cpu-throttling \
            --execution-environment gen2 \
            --set-secrets="DATABASE_URL=${{ env.DATABASE_URL_SECRET }}:latest" \
            --set-cloudsql-instances ${{ env.DB_CONNECTION_NAME }} \
            --startup-probe="httpGet.path=/api/health,httpGet.port=8000,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=10,failureThreshold=3" \
            --liveness-probe="httpGet.path=/api/health,httpGet.port=8000,timeoutSeconds=5,periodSeconds=30,failureThreshold=3"

      - name: Seed Firebase Auth with admin user
        run: |
          # Install mise for tool management
          curl https://mise.run | sh
          export PATH="$HOME/.local/bin:$PATH"

          cd backend
          mise install
          mise exec -- uv run python scripts/seed_firebase.py --production
          echo "✅ Firebase Auth seeded with admin user"

      - name: Build and deploy frontend to Firebase Hosting
        run: |
          # Build frontend with Firebase configuration from Pulumi
          cd frontend
          npm ci

          # Set Firebase config as environment variables for Vite build
          export VITE_FIREBASE_API_KEY="${{ env.FIREBASE_API_KEY }}"
          export VITE_FIREBASE_AUTH_DOMAIN="${{ env.FIREBASE_AUTH_DOMAIN }}"
          export VITE_FIREBASE_PROJECT_ID="${{ env.FIREBASE_PROJECT_ID }}"

          npm run build
          echo "✅ Frontend built with Firebase config from Pulumi"

          # Deploy to Firebase Hosting using service account credentials
          # GOOGLE_APPLICATION_CREDENTIALS is already set by google-github-actions/auth
          cd ..
          npx firebase-tools deploy --only hosting --project verity-platform-473406
          echo "✅ Frontend deployed to Firebase Hosting"