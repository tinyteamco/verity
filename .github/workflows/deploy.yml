name: Deploy

on:
  push:
    branches: [main]

# Prevent concurrent deployments to avoid race conditions
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  PROJECT_ID: verity-platform-473406
  SERVICE: verity-backend
  REGION: europe-west1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Bootstrap development environment
        run: make bootstrap

      - name: Run backend checks
        run: make backend-check

      - name: Setup Firebase project config
        run: |
          # Create Firebase project config that Makefile expects
          echo '{"projects":{"default":"verity-local"}}' > .firebaserc

      - name: Start MinIO for audio storage tests
        run: docker compose up -d minio minio-setup

      - name: Start Firebase emulator
        run: cd backend && make start-firebase

      - name: Run backend tests (seeds Firebase automatically)
        run: cd backend && make test-ci

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          IMAGE_URI="europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/verity/backend:${{ github.sha }}"
          docker build --platform linux/amd64 -t $IMAGE_URI ./backend
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          # Run migrations using Cloud Run Jobs for one-time execution
          gcloud run jobs create verity-migrate-${{ github.sha }} \
            --image ${{ env.IMAGE_URI }} \
            --region ${{ env.REGION }} \
            --task-timeout 300 \
            --set-env-vars DATABASE_URL="postgresql+psycopg://uxr:${{ secrets.DATABASE_PASSWORD }}@/uxr?host=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:verity-postgres" \
            --set-cloudsql-instances ${{ env.PROJECT_ID }}:${{ env.REGION }}:verity-postgres \
            --command="uv,run,alembic,upgrade,head" \
            --execute-now \
            --wait

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE }} \
            --image ${{ env.IMAGE_URI }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --port 8000 \
            --use-http2 \
            --cpu-throttling \
            --execution-environment gen2 \
            --set-env-vars DATABASE_URL="postgresql+psycopg://uxr:${{ secrets.DATABASE_PASSWORD }}@/uxr?host=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:verity-postgres" \
            --set-cloudsql-instances ${{ env.PROJECT_ID }}:${{ env.REGION }}:verity-postgres \
            --startup-probe="httpGet.path=/health,httpGet.port=8000,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=10,failureThreshold=3" \
            --liveness-probe="httpGet.path=/health,httpGet.port=8000,timeoutSeconds=5,periodSeconds=30,failureThreshold=3"