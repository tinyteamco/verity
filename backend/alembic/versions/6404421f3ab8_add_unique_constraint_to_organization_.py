"""add unique constraint to organization name

Revision ID: 6404421f3ab8
Revises: 040b5add8cf3
Create Date: 2025-10-03 22:55:08.295166

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "6404421f3ab8"
down_revision: str | Sequence[str] | None = "040b5add8cf3"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # First, deduplicate existing organization names
    conn = op.get_bind()

    # Find all duplicate names
    duplicates = conn.execute(
        sa.text(
            """
            SELECT name, COUNT(*) as count
            FROM organizations
            GROUP BY name
            HAVING COUNT(*) > 1
            """
        )
    ).fetchall()

    # For each duplicate name, rename all but the first occurrence
    for name, _count in duplicates:
        # Get all organizations with this name, ordered by id
        orgs = conn.execute(
            sa.text("SELECT id FROM organizations WHERE name = :name ORDER BY id"),
            {"name": name},
        ).fetchall()

        # Rename all but the first one
        for idx, (org_id,) in enumerate(orgs[1:], start=2):
            new_name = f"{name} ({idx})"
            conn.execute(
                sa.text("UPDATE organizations SET name = :new_name WHERE id = :org_id"),
                {"new_name": new_name, "org_id": org_id},
            )

    # Now it's safe to add the unique constraint
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint("uq_organizations_name", "organizations", ["name"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_organizations_name", "organizations", type_="unique")
    # ### end Alembic commands ###
